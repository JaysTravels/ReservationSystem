// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ReservationSystem.Domain.DBContext;

#nullable disable

namespace ReservationSystem.Domain.Migrations
{
    [DbContext(typeof(DB_Context))]
    [Migration("20250226190310_udpatedeeplinktable")]
    partial class udpatedeeplinktable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ReservationApi.ReservationSystem.Domain.DB_Models.BookingInfo", b =>
                {
                    b.Property<int>("AutoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("auto_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AutoId"));

                    b.Property<string>("BookingRef")
                        .HasColumnType("text")
                        .HasColumnName("booking_ref");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Error")
                        .HasColumnType("text")
                        .HasColumnName("error");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("text")
                        .HasColumnName("payment_status");

                    b.Property<string>("PnrNumber")
                        .HasColumnType("text")
                        .HasColumnName("pnr_number");

                    b.Property<bool?>("SentEmail")
                        .HasColumnType("boolean")
                        .HasColumnName("sent_email");

                    b.Property<string>("SessionId")
                        .HasColumnType("text")
                        .HasColumnName("session_id");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("total_amount");

                    b.HasKey("AutoId");

                    b.ToTable("booking_info");
                });

            modelBuilder.Entity("ReservationApi.ReservationSystem.Domain.DB_Models.ManualPayment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("payment_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PaymentId"));

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<string>("BookingRef")
                        .HasColumnType("text")
                        .HasColumnName("booking_ref");

                    b.Property<string>("City")
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<bool?>("PaymentStatus")
                        .HasColumnType("boolean")
                        .HasColumnName("payment_status");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text")
                        .HasColumnName("postal_code");

                    b.HasKey("PaymentId");

                    b.ToTable("manual_payment");
                });

            modelBuilder.Entity("ReservationSystem.Domain.DB_Models.ApplyMarkup", b =>
                {
                    b.Property<int>("MarkupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("markup_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MarkupId"));

                    b.Property<decimal?>("AdultMarkup")
                        .HasColumnType("numeric")
                        .HasColumnName("adult_markup");

                    b.Property<string>("Airline")
                        .HasColumnType("text")
                        .HasColumnName("airline");

                    b.Property<string>("BetweenHoursFrom")
                        .HasColumnType("text")
                        .HasColumnName("between_hours_from");

                    b.Property<decimal?>("BetweenHoursTo")
                        .HasColumnType("numeric")
                        .HasColumnName("between_hours_to");

                    b.Property<decimal?>("ChildMarkup")
                        .HasColumnType("numeric")
                        .HasColumnName("child_markup");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("EndAirport")
                        .HasColumnType("text")
                        .HasColumnName("end_airport");

                    b.Property<DateOnly?>("FromDate")
                        .HasColumnType("date")
                        .HasColumnName("from_date");

                    b.Property<decimal?>("InfantMarkup")
                        .HasColumnType("numeric")
                        .HasColumnName("infant_markup");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool?>("IsPercentage")
                        .HasColumnType("boolean")
                        .HasColumnName("is_percentage");

                    b.Property<string>("StartAirport")
                        .HasColumnType("text")
                        .HasColumnName("start_airport");

                    b.Property<DateOnly?>("ToDate")
                        .HasColumnType("date")
                        .HasColumnName("to_date");

                    b.HasKey("MarkupId");

                    b.ToTable("apply_markup");
                });

            modelBuilder.Entity("ReservationSystem.Domain.DB_Models.DayName", b =>
                {
                    b.Property<int>("DayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("day_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DayId"));

                    b.Property<string>("Day_Name")
                        .HasColumnType("text")
                        .HasColumnName("day_name");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.HasKey("DayId");

                    b.ToTable("day_name");
                });

            modelBuilder.Entity("ReservationSystem.Domain.DB_Models.Deeplink", b =>
                {
                    b.Property<int>("DeeplinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("deeplink_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DeeplinkId"));

                    b.Property<int?>("Adults")
                        .HasColumnType("integer")
                        .HasColumnName("adults");

                    b.Property<int?>("Adults2")
                        .HasColumnType("integer")
                        .HasColumnName("adults2");

                    b.Property<int?>("Adults3")
                        .HasColumnType("integer")
                        .HasColumnName("adults3");

                    b.Property<string>("CabinClass")
                        .HasColumnType("text")
                        .HasColumnName("cabin_class");

                    b.Property<string>("CabinClass2")
                        .HasColumnType("text")
                        .HasColumnName("cabin_class2");

                    b.Property<string>("CabinClass3")
                        .HasColumnType("text")
                        .HasColumnName("cabin_class3");

                    b.Property<int?>("Children")
                        .HasColumnType("integer")
                        .HasColumnName("children");

                    b.Property<int?>("Children2")
                        .HasColumnType("integer")
                        .HasColumnName("children2");

                    b.Property<int?>("Children3")
                        .HasColumnType("integer")
                        .HasColumnName("children3");

                    b.Property<string>("CityName1")
                        .HasColumnType("text")
                        .HasColumnName("city_name1");

                    b.Property<string>("CityName2")
                        .HasColumnType("text")
                        .HasColumnName("city_name2");

                    b.Property<string>("CityName3")
                        .HasColumnType("text")
                        .HasColumnName("city_name3");

                    b.Property<string>("CountryName")
                        .HasColumnType("text")
                        .HasColumnName("country_name");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("DepartureDate")
                        .HasColumnType("text")
                        .HasColumnName("departuredate");

                    b.Property<string>("DepartureDate2")
                        .HasColumnType("text")
                        .HasColumnName("departuredate2");

                    b.Property<string>("DepartureDate3")
                        .HasColumnType("text")
                        .HasColumnName("departuredate3");

                    b.Property<string>("Destination")
                        .HasColumnType("text")
                        .HasColumnName("destination");

                    b.Property<string>("Destination2")
                        .HasColumnType("text")
                        .HasColumnName("destination2");

                    b.Property<string>("Destination3")
                        .HasColumnType("text")
                        .HasColumnName("destination3");

                    b.Property<string>("FlightType")
                        .HasColumnType("text")
                        .HasColumnName("flight_type");

                    b.Property<string>("FlightType2")
                        .HasColumnType("text")
                        .HasColumnName("flight_type2");

                    b.Property<string>("FlightType3")
                        .HasColumnType("text")
                        .HasColumnName("flight_type3");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<int?>("Infant")
                        .HasColumnType("integer")
                        .HasColumnName("infant");

                    b.Property<int?>("Infant2")
                        .HasColumnType("integer")
                        .HasColumnName("infant2");

                    b.Property<int?>("Infant3")
                        .HasColumnType("integer")
                        .HasColumnName("infant3");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Origin")
                        .HasColumnType("text")
                        .HasColumnName("origin");

                    b.Property<string>("Origin2")
                        .HasColumnType("text")
                        .HasColumnName("origin2");

                    b.Property<string>("Origin3")
                        .HasColumnType("text")
                        .HasColumnName("origin3");

                    b.Property<decimal?>("Price1")
                        .HasColumnType("numeric")
                        .HasColumnName("price1");

                    b.Property<decimal?>("Price2")
                        .HasColumnType("numeric")
                        .HasColumnName("price2");

                    b.Property<decimal?>("Price3")
                        .HasColumnType("numeric")
                        .HasColumnName("price3");

                    b.Property<string>("ReturnDate")
                        .HasColumnType("text")
                        .HasColumnName("returndate");

                    b.Property<string>("ReturnDate2")
                        .HasColumnType("text")
                        .HasColumnName("returndate2");

                    b.Property<string>("ReturnDate3")
                        .HasColumnType("text")
                        .HasColumnName("returndate3");

                    b.HasKey("DeeplinkId");

                    b.ToTable("deeplink");
                });

            modelBuilder.Entity("ReservationSystem.Domain.DB_Models.FareType", b =>
                {
                    b.Property<int>("FareTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("faretype_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FareTypeId"));

                    b.Property<string>("Fare_Type")
                        .HasColumnType("text")
                        .HasColumnName("fare_type_name");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.HasKey("FareTypeId");

                    b.ToTable("fare_type");
                });

            modelBuilder.Entity("ReservationSystem.Domain.DB_Models.FlightInfo", b =>
                {
                    b.Property<int>("FlightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FlightId"));

                    b.Property<string>("AmadeusSessionId")
                        .HasColumnType("text")
                        .HasColumnName("amadeus_session_id");

                    b.Property<DateTime?>("ArrivalTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("arrival_time");

                    b.Property<string>("CabinClass")
                        .HasColumnType("text")
                        .HasColumnName("cabin_class");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Departure")
                        .HasColumnType("text")
                        .HasColumnName("departure");

                    b.Property<DateTime?>("DepartureTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("departure_time");

                    b.Property<string>("Destination")
                        .HasColumnType("text")
                        .HasColumnName("destination");

                    b.Property<string>("FlightNumber")
                        .HasColumnType("text")
                        .HasColumnName("flight_number");

                    b.Property<string>("FlightOffer")
                        .HasColumnType("jsonb")
                        .HasColumnName("flight_offer");

                    b.HasKey("FlightId");

                    b.ToTable("flight_info");
                });

            modelBuilder.Entity("ReservationSystem.Domain.DB_Models.FlightMarkup", b =>
                {
                    b.Property<long>("MarkupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("markup_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("MarkupId"));

                    b.Property<decimal?>("AdultMarkup")
                        .HasColumnType("numeric")
                        .HasColumnName("adult_markup");

                    b.Property<string>("Airline")
                        .HasColumnType("text")
                        .HasColumnName("airline");

                    b.Property<decimal?>("AirlineMarkup")
                        .HasColumnType("numeric")
                        .HasColumnName("airline_markup");

                    b.Property<bool?>("ApplyAirlineDiscount")
                        .HasColumnType("boolean")
                        .HasColumnName("apply_airline_discount");

                    b.Property<bool?>("ApplyMarkup")
                        .HasColumnType("boolean")
                        .HasColumnName("apply_markup");

                    b.Property<string>("BetweenHours")
                        .HasColumnType("text")
                        .HasColumnName("between_hours");

                    b.Property<decimal?>("BetweenHoursMarkup")
                        .HasColumnType("numeric")
                        .HasColumnName("between_hours_markup");

                    b.Property<decimal?>("ChildMarkup")
                        .HasColumnType("numeric")
                        .HasColumnName("child_markup");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_on");

                    b.Property<decimal?>("DateMarkup")
                        .HasColumnType("numeric")
                        .HasColumnName("date_markup");

                    b.Property<decimal?>("DiscountOnAirline")
                        .HasColumnType("numeric")
                        .HasColumnName("discount_on_airline");

                    b.Property<decimal?>("DiscountOnMeta")
                        .HasColumnType("numeric")
                        .HasColumnName("discount_on_meta");

                    b.Property<string>("EndAirport")
                        .HasColumnType("text")
                        .HasColumnName("end_airport");

                    b.Property<decimal?>("EndAirportMarkup")
                        .HasColumnType("numeric")
                        .HasColumnName("end_airport_markup");

                    b.Property<string>("FareType")
                        .HasColumnType("text")
                        .HasColumnName("fare_type");

                    b.Property<decimal?>("FareTypeMarkup")
                        .HasColumnType("numeric")
                        .HasColumnName("fare_type_markup");

                    b.Property<DateOnly?>("FromDate")
                        .HasColumnType("date")
                        .HasColumnName("from_date");

                    b.Property<string>("Gds")
                        .HasColumnType("text")
                        .HasColumnName("gds");

                    b.Property<decimal?>("GdsMarkup")
                        .HasColumnType("numeric")
                        .HasColumnName("gds_markup");

                    b.Property<decimal?>("InfantMarkup")
                        .HasColumnType("numeric")
                        .HasColumnName("infant_markup");

                    b.Property<bool?>("IsPercentage")
                        .HasColumnType("boolean")
                        .HasColumnName("is_percentage");

                    b.Property<string>("JournyType")
                        .HasColumnType("text")
                        .HasColumnName("journy_type");

                    b.Property<decimal?>("JournyTypeMarkup")
                        .HasColumnType("numeric")
                        .HasColumnName("journy_type_markup");

                    b.Property<string>("MarketingSource")
                        .HasColumnType("text")
                        .HasColumnName("marketing_source");

                    b.Property<decimal?>("MarketingSourceMarkup")
                        .HasColumnType("numeric")
                        .HasColumnName("marketing_source_markup");

                    b.Property<string>("Meta")
                        .HasColumnType("text")
                        .HasColumnName("meta");

                    b.Property<decimal?>("MetaMarkup")
                        .HasColumnType("numeric")
                        .HasColumnName("meta_markup");

                    b.Property<string>("StartAirport")
                        .HasColumnType("text")
                        .HasColumnName("start_airport");

                    b.Property<decimal?>("StartAirportMarkup")
                        .HasColumnType("numeric")
                        .HasColumnName("start_airport_markup");

                    b.Property<DateOnly?>("ToDate")
                        .HasColumnType("date")
                        .HasColumnName("to_date");

                    b.HasKey("MarkupId");

                    b.ToTable("flight_markup");
                });

            modelBuilder.Entity("ReservationSystem.Domain.DB_Models.GDS", b =>
                {
                    b.Property<int>("GdsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("gds_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GdsId"));

                    b.Property<string>("GdsName")
                        .HasColumnType("text")
                        .HasColumnName("gds_name");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.HasKey("GdsId");

                    b.ToTable("gds");
                });

            modelBuilder.Entity("ReservationSystem.Domain.DB_Models.InsuranceInfo", b =>
                {
                    b.Property<int>("InsurancneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("insurance_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InsurancneId"));

                    b.Property<string>("Contact")
                        .HasColumnType("text")
                        .HasColumnName("contact");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DepartureDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("depture_date");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("NumberOfTravellers")
                        .HasColumnType("text")
                        .HasColumnName("number_of_travellers");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("return_date");

                    b.Property<string>("WhereTo")
                        .HasColumnType("text")
                        .HasColumnName("where_to");

                    b.HasKey("InsurancneId");

                    b.ToTable("insurance_info");
                });

            modelBuilder.Entity("ReservationSystem.Domain.DB_Models.JourneyType", b =>
                {
                    b.Property<int>("JournyTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("journytype_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("JournyTypeId"));

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("JournyType")
                        .HasColumnType("text")
                        .HasColumnName("journytype");

                    b.HasKey("JournyTypeId");

                    b.ToTable("journy_type");
                });

            modelBuilder.Entity("ReservationSystem.Domain.DB_Models.MarketingSource", b =>
                {
                    b.Property<int>("SourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("source_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SourceId"));

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("SourceName")
                        .HasColumnType("text")
                        .HasColumnName("source_name");

                    b.HasKey("SourceId");

                    b.ToTable("marketing_source");
                });

            modelBuilder.Entity("ReservationSystem.Domain.DB_Models.MarkupDay", b =>
                {
                    b.Property<int>("MarkupDayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("markup_day_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MarkupDayId"));

                    b.Property<int?>("DayId")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int?>("MarkupId")
                        .HasColumnType("integer");

                    b.HasKey("MarkupDayId");

                    b.HasIndex("DayId");

                    b.HasIndex("MarkupId");

                    b.ToTable("markup_day");
                });

            modelBuilder.Entity("ReservationSystem.Domain.DB_Models.MarkupFareType", b =>
                {
                    b.Property<int>("MarkupFareId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("markup_fare_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MarkupFareId"));

                    b.Property<int>("FareTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("MarkupId")
                        .HasColumnType("integer");

                    b.HasKey("MarkupFareId");

                    b.HasIndex("FareTypeId");

                    b.HasIndex("MarkupId");

                    b.ToTable("MarkupFareTypes");
                });

            modelBuilder.Entity("ReservationSystem.Domain.DB_Models.MarkupGDS", b =>
                {
                    b.Property<int>("MarkupGdsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("markup_gds_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MarkupGdsId"));

                    b.Property<int>("GdsId")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("MarkupId")
                        .HasColumnType("integer");

                    b.HasKey("MarkupGdsId");

                    b.HasIndex("GdsId");

                    b.HasIndex("MarkupId");

                    b.ToTable("MarkupGds");
                });

            modelBuilder.Entity("ReservationSystem.Domain.DB_Models.MarkupJournyType", b =>
                {
                    b.Property<int>("MarkupJournyTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("markup_journytype_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MarkupJournyTypeId"));

                    b.Property<int>("JournyTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("MarkupId")
                        .HasColumnType("integer");

                    b.HasKey("MarkupJournyTypeId");

                    b.HasIndex("JournyTypeId");

                    b.HasIndex("MarkupId");

                    b.ToTable("MarkupJournyTypes");
                });

            modelBuilder.Entity("ReservationSystem.Domain.DB_Models.MarkupMarketingSource", b =>
                {
                    b.Property<int>("MarkupSourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("markup_source_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MarkupSourceId"));

                    b.Property<int>("MarkupId")
                        .HasColumnType("integer");

                    b.Property<int>("SourceId")
                        .HasColumnType("integer");

                    b.HasKey("MarkupSourceId");

                    b.HasIndex("MarkupId");

                    b.HasIndex("SourceId");

                    b.ToTable("MarkupMarketingSources");
                });

            modelBuilder.Entity("ReservationSystem.Domain.DB_Models.PassengerInfo", b =>
                {
                    b.Property<int>("PassengerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PassengerId"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DOB")
                        .HasColumnType("text")
                        .HasColumnName("dob");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<int>("FlightId")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsLead")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("PassengerType")
                        .HasColumnType("text")
                        .HasColumnName("passenger_type");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("SessionId")
                        .HasColumnType("text")
                        .HasColumnName("session_id");

                    b.HasKey("PassengerId");

                    b.HasIndex("FlightId");

                    b.ToTable("passenger_info");
                });

            modelBuilder.Entity("ReservationSystem.Domain.DB_Models.ReservationFlow", b =>
                {
                    b.Property<long>("AutoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("auto_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("AutoId"));

                    b.Property<string>("AmadeusSessionId")
                        .HasColumnType("text")
                        .HasColumnName("amadeus_session_id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_on");

                    b.Property<bool?>("IsError")
                        .HasColumnType("boolean")
                        .HasColumnName("is_error");

                    b.Property<string>("Request")
                        .HasColumnType("jsonb")
                        .HasColumnName("request");

                    b.Property<string>("RequestName")
                        .HasColumnType("text")
                        .HasColumnName("request_name");

                    b.Property<string>("Response")
                        .HasColumnType("jsonb")
                        .HasColumnName("response");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("AutoId");

                    b.ToTable("reservation_flow");
                });

            modelBuilder.Entity("ReservationSystem.Domain.DB_Models.SearchAvailabilityResults", b =>
                {
                    b.Property<long>("result_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("result_id"));

                    b.Property<DateTime?>("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("request")
                        .HasColumnType("jsonb");

                    b.Property<string>("response")
                        .HasColumnType("jsonb");

                    b.Property<int?>("total_results")
                        .HasColumnType("integer");

                    b.Property<int?>("user_id")
                        .HasColumnType("integer");

                    b.HasKey("result_id");

                    b.ToTable("availibility_results");
                });

            modelBuilder.Entity("ReservationSystem.Domain.DB_Models.Users", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.HasKey("UserId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("ReservationSystem.Domain.Models.Enquiry.Enquiry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email_address");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("message");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_no");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.HasKey("Id");

                    b.ToTable("Enquiries");
                });

            modelBuilder.Entity("ReservationSystem.Domain.DB_Models.MarkupDay", b =>
                {
                    b.HasOne("ReservationSystem.Domain.DB_Models.DayName", "Day")
                        .WithMany("MarkupDay")
                        .HasForeignKey("DayId");

                    b.HasOne("ReservationSystem.Domain.DB_Models.ApplyMarkup", "Markup")
                        .WithMany("MarkupDay")
                        .HasForeignKey("MarkupId");

                    b.Navigation("Day");

                    b.Navigation("Markup");
                });

            modelBuilder.Entity("ReservationSystem.Domain.DB_Models.MarkupFareType", b =>
                {
                    b.HasOne("ReservationSystem.Domain.DB_Models.FareType", "FareType")
                        .WithMany("MarkupFareTypes")
                        .HasForeignKey("FareTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReservationSystem.Domain.DB_Models.ApplyMarkup", "Markup")
                        .WithMany("MarkupFareTypes")
                        .HasForeignKey("MarkupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FareType");

                    b.Navigation("Markup");
                });

            modelBuilder.Entity("ReservationSystem.Domain.DB_Models.MarkupGDS", b =>
                {
                    b.HasOne("ReservationSystem.Domain.DB_Models.GDS", "gds")
                        .WithMany("MarkupGds")
                        .HasForeignKey("GdsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReservationSystem.Domain.DB_Models.ApplyMarkup", "Markup")
                        .WithMany("MarkupGds")
                        .HasForeignKey("MarkupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Markup");

                    b.Navigation("gds");
                });

            modelBuilder.Entity("ReservationSystem.Domain.DB_Models.MarkupJournyType", b =>
                {
                    b.HasOne("ReservationSystem.Domain.DB_Models.JourneyType", "Journy")
                        .WithMany("MarkupJournyType")
                        .HasForeignKey("JournyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReservationSystem.Domain.DB_Models.ApplyMarkup", "Markup")
                        .WithMany("MarkupJournyType")
                        .HasForeignKey("MarkupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Journy");

                    b.Navigation("Markup");
                });

            modelBuilder.Entity("ReservationSystem.Domain.DB_Models.MarkupMarketingSource", b =>
                {
                    b.HasOne("ReservationSystem.Domain.DB_Models.ApplyMarkup", "Markup")
                        .WithMany("MarkupMarketing")
                        .HasForeignKey("MarkupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReservationSystem.Domain.DB_Models.MarketingSource", "Source")
                        .WithMany("MarkupMarketing")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Markup");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("ReservationSystem.Domain.DB_Models.PassengerInfo", b =>
                {
                    b.HasOne("ReservationSystem.Domain.DB_Models.FlightInfo", "Flight")
                        .WithMany()
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flight");
                });

            modelBuilder.Entity("ReservationSystem.Domain.DB_Models.ApplyMarkup", b =>
                {
                    b.Navigation("MarkupDay");

                    b.Navigation("MarkupFareTypes");

                    b.Navigation("MarkupGds");

                    b.Navigation("MarkupJournyType");

                    b.Navigation("MarkupMarketing");
                });

            modelBuilder.Entity("ReservationSystem.Domain.DB_Models.DayName", b =>
                {
                    b.Navigation("MarkupDay");
                });

            modelBuilder.Entity("ReservationSystem.Domain.DB_Models.FareType", b =>
                {
                    b.Navigation("MarkupFareTypes");
                });

            modelBuilder.Entity("ReservationSystem.Domain.DB_Models.GDS", b =>
                {
                    b.Navigation("MarkupGds");
                });

            modelBuilder.Entity("ReservationSystem.Domain.DB_Models.JourneyType", b =>
                {
                    b.Navigation("MarkupJournyType");
                });

            modelBuilder.Entity("ReservationSystem.Domain.DB_Models.MarketingSource", b =>
                {
                    b.Navigation("MarkupMarketing");
                });
#pragma warning restore 612, 618
        }
    }
}
